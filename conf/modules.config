/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename },
        enabled: params.publish_all_tools
    ]

    withName: 'WIPERTOOLS_FASTQSCATTER' {
        ext.args = '--os unix'
    }

    withName: 'WIPERTOOLS_FASTQWIPER' {
        ext.args = "--alphabet ${params.alphabet}"
    }

    withName: 'WIPERTOOLS_REPORTGATHER' {
        publishDir = [
            path: { "${params.outdir}/${params.repaired_folder}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if(!filename.equals('versions.yml')) {
                    if (filename.replace("${meta.sample_id}", "").contains("_1_")){
                        "${meta.sample_id}_1.report"
                    } else if (filename.replace("${meta.sample_id}", "").contains("_2_")){
                        "${meta.sample_id}_2.report"
                    } else {
                        "${meta.sample_id}.report"
                    }
                } else {
                    null
                }
            }
        ]
    }

    withName: 'WIPERTOOLS_FASTQGATHER' {
        publishDir = [
            path: { "${params.outdir}/${params.repaired_folder}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if(!filename.equals('versions.yml') && (meta.single_end || params.skip_bbmap_repair)) {
                    if (filename.replace("${meta.sample_id}", "").contains("_1_")){
                        "${meta.sample_id}_1.fastq.gz"
                    } else if (filename.replace("${meta.sample_id}", "").contains("_2_")){
                        "${meta.sample_id}_2.fastq.gz"
                    } else {
                        "${meta.sample_id}.fastq.gz"
                    }
                } else {
                    null
                }
            }
        ]
    }

    withName: 'BBMAP_REPAIR' {
        ext.args = "qin=${params.qin}"

        publishDir = [
            path: { "${params.outdir}/${params.repaired_folder}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if(!filename.equals('versions.yml')) {
                    System.out.println("filename: ${filename}")
                    if (filename.replace("${meta.id}", "").contains("_1_")){
                        "${meta.id}_1.fastq.gz"
                    } else if (filename.replace("${meta.id}", "").contains("_2_")){
                        "${meta.id}_2.fastq.gz"
                    } else {
                        "${meta.id}_singleton.fastq.gz"
                    }
                } else {
                    null
                }
            }
        ]
    }

    withName: 'FASTQC' {
        memory = 8.GB  // to be included during development and commented out before release
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/QC/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/QC/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
